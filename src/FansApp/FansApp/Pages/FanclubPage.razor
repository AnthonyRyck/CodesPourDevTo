@page "/FanclubPage"

@using FansApp.ViewModel
@using FansApp.Composants

@using Microsoft.Extensions.Localization
@inject IStringLocalizer<FanclubPage> localizer

@*Pour avoir les ressouces de langue pour le composant*@
@inject IStringLocalizer<FanComponent> LocalizerFanComposant

@inject IFanClubViewModel viewModel
@implements IAsyncDisposable


<h3>@localizer["TitreFanclub"]</h3>

<div>
	<span>
		<button @onclick="@viewModel.DisplayNewFan">@localizer["AddNewMember"]</button>

		<button @onclick="@viewModel.DisplayNewFanWithValidation">@localizer["AddNewMemberValidation"]</button>
	</span>
</div>

@*Sans validation*@
<TemplatedDialog Show="viewModel.CanDisplayNewFan">
	<NewFanComponent GetNameFanCallBack="viewModel.AddFan"
					 OnCancel="viewModel.CancelNewFan" />
</TemplatedDialog>

@*Avec validation des champs*@
<TemplatedDialog Show="viewModel.CanDisplayNewFanWithValidation">
	<NewFanComponentWithEditForms EditContextValidation="viewModel.EditContextValidationFan"
								  FanModel="viewModel.FanModelValidation"
								  OnCancel="viewModel.CancelNewFan"
								  OnValidSubmit="viewModel.ValidNewFan" />
</TemplatedDialog>

<FanClubComposant FanCollection="@viewModel.AllFansCollection"
				  GetSonClickCallBack="@viewModel.AddClick"
				  OnClickToOpenFanPage="@viewModel.OpenFanPage"
				  Localizer="@GetLocalisation" />

@code {
	protected override async Task OnInitializedAsync()
	{
		viewModel.SetStateHasChanged(StateHasChanged);
		await viewModel.InitHub();
	}

	/// <summary>
	/// Libère les ressources du HubConnection,
	/// quand l'utilisateur quitte la vue.
	/// </summary>
	/// <returns></returns>
	public async ValueTask DisposeAsync()
	{
		await viewModel.DisposeHubConnection();
	}

	private string GetLocalisation(string key)
	{
		return LocalizerFanComposant[key].Value;
	}
}
